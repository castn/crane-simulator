import sys

from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QApplication, QMessageBox
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

import crane
import plotter
from MainWindow import Ui_MainWindow


class matplotlib_canvas(FigureCanvasQTAgg):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = self.fig.add_subplot(111, projection='3d')
        # self.fig.gca().set_aspect('auto')
        # fig.gca().autoscale()
        super(matplotlib_canvas, self).__init__(self.fig)


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        # Call the autogenerated Ui_MainWindow.py, generated from the .ui file using the command "pyuic6 mainwindow.ui -o MainWindow.py"
        self.setupUi(self)

        self.sc = matplotlib_canvas(self, width=5, height=4, dpi=100)
        toolbar = NavigationToolbar(self.sc, self)
        crane.create_crane()
        nodes, beams = crane.get_crane()
        plotter.plot(nodes, beams, 'gray', '--', 'Undeformed', self.sc.axes, self.sc.fig)

        # Add toolbar and canvas to window
        self.plot_layout.addWidget(toolbar)
        self.plot_layout.addWidget(self.sc)

        self.apply_button.clicked.connect(self.apply_configuration)

    def apply_configuration(self):
        self.output.appendPlainText(
            f"Tower values: [{self.towerHeight_spinbox.value()},{self.towerWidth_spinbox.value()},{self.towerSegment_spinbox.value()},{self.towerSupportType_comboBox.currentText()}]")
        self.output.appendPlainText(
            f"Jib values: [{self.jibLength_spinBox.value()},{self.jibLength_spinBox.value()},{self.jibLength_spinBox.value()},{self.jibSupportType_comboBox.currentText()}]")
        self.output.appendPlainText(
            f"CounterJib values: [{self.counterJibLength_spinBox.value()},{self.counterJibHeight_spinBox.value()},{self.counterJibSegments_spinBox.value()},{self.counterJibSupportType_comboBox.currentText()}]")

        if self.towerBox.isChecked():
            crane.set_tower_dims(self.towerHeight_spinbox.value(), self.towerWidth_spinbox.value(),
                                 self.towerSegment_spinbox.value(), self.towerSupportType_comboBox.currentText())
        if self.jibBox.isChecked():
            crane.set_jib_dims(self.jibLength_spinBox.value(), self.jibLength_spinBox.value(),
                               self.jibLength_spinBox.value())
        if self.counterJibBox.isChecked():
            crane.set_counterjib_dims(self.counterJibLength_spinBox.value(), self.counterJibHeight_spinBox.value(),
                                      self.counterJibSegments_spinBox.value(),
                                      self.counterJibSupportType_comboBox.currentText())

        nodes, beams = crane.get_crane()
        plotter.plot(nodes, beams, 'gray', '--', 'Undeformed', self.sc.axes, self.sc.fig)
        self.plot_layout.replaceWidget(self.sc, self.sc)
        
        self.output.appendPlainText(f"Enable FEM: [{self.enableFEM_checkbox.isChecked()}]")
        if self.enableFEM_checkbox.isChecked():
            # N, R, U = crane.analyze()
            self.analysis.appendPlainText('Axial Forces (positive = tension, negative = compression)')
            # self.analysis.appendPlainText(N[np.newaxis].T)
            self.analysis.appendPlainText('Reaction Forces (positive = upward, negative = downward)')
            # self.analysis.appendPlainText(R)
            self.analysis.appendPlainText('Deformation at nodes')
            # self.analysis.appendPlainText(U)
        
        self.output.appendPlainText("------")
        self.progressBar.setValue(100)
        QMessageBox.about(self, "Title", "Lorem ipsum dolor sit amet, consetetur sadipscing elitr.")


# You need one (and only one) QApplication instance per application.
# Pass in sys.argv to allow command line arguments for your app.
# If you know you won't use command line arguments QApplication([]) works too.
app = QApplication(sys.argv)

# Create a Qt widget, which will be our window.
window = MainWindow()
window.show()  # IMPORTANT!!!!! Windows are hidden by default.

# Start the event loop.
app.exec()

# Will not be reached until application is closed
