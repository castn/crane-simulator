import sys

from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QApplication, QMessageBox
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import numpy as np

import crane
import plotter
from MainWindow import Ui_MainWindow


class matplotlib_canvas(FigureCanvasQTAgg):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = self.fig.add_subplot(111, projection='3d')
        super(matplotlib_canvas, self).__init__(self.fig)


class Dims:
    TOWER_HEIGHT = 0
    TOWER_WIDTH = 0
    TOWER_SEGMENTS = 0
    TOWER_SEG_LENGTH = 0
    TOWER_SUP_TYPE = 0

    JIB_HEIGHT = 0
    JIB_LENGTH = 0
    JIB_SEGMENTS = 0
    JIB_SEG_LENGTH = 0
    JIB_SUP_TYPE = 0

    COUNTERJIB_HEIGHT = 0
    COUNTERJIB_LENGTH = 0
    COUNTERJIB_SEGMENTS = 0
    COUNTERJIB_SEG_LENGTH = 0
    COUNTERJIB_SUP_TYPE = 0


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        # Call the autogenerated Ui_MainWindow.py, generated from the .ui file using the command "pyuic6 mainwindow.ui -o MainWindow.py"
        self.setupUi(self)

        self.canvas = matplotlib_canvas(self, width=5, height=4, dpi=100)
        self.toolbar = NavigationToolbar(self.canvas, self)
        crane.create_crane()
        nodes, beams = crane.get_crane()
        plotter.plot(nodes, beams, 'gray', '--',
                     'Undeformed', self.canvas.axes, self.canvas.fig)

        # Add toolbar and canvas to window
        self.plot_layout.addWidget(self.toolbar)
        self.plot_layout.addWidget(self.canvas)
        # Set default size of plotBox, otherwise will shrink to minimal and needs manual adjustment
        self.plotBox.setGeometry(0, 0, 716, 544)
        
        self.apply_button.clicked.connect(self.apply_configuration)


    def update_plot(self):
        print('Generating plot')
        self.plot_layout.removeWidget(self.toolbar)
        self.plot_layout.removeWidget(self.canvas)
        
        updated_canvas = matplotlib_canvas(self, width=5, height=4, dpi=100)
        toolbar_new = NavigationToolbar(updated_canvas, self)
        
        crane.create_crane()
        nodes, beams = crane.get_crane()
        plotter.plot(nodes, beams, 'gray', '--',
                     'Undeformed', updated_canvas.axes, updated_canvas.fig)
        self.canvas = updated_canvas
        self.toolbar = toolbar_new
        self.plot_layout.addWidget(self.toolbar)
        self.plot_layout.addWidget(self.canvas)
        #self.plotBox.setGeometry(0, 0, 716, 544)
        
        return 'Made new plot'


    def apply_configuration(self):
        Dims.TOWER_HEIGHT = self.towerHeight_spinbox.value()
        Dims.TOWER_WIDTH = self.towerWidth_spinbox.value()
        Dims.TOWER_SEGMENTS = self.towerSegment_spinbox.value()
        Dims.TOWER_SEG_LENGTH = Dims.TOWER_HEIGHT / Dims.TOWER_SEGMENTS
        Dims.TOWER_SUP_TYPE = self.towerSupportType_comboBox.currentText()

        Dims.JIB_HEIGHT = self.jibHeight_spinBox.value()
        Dims.JIB_LENGTH = self.jibLength_spinBox.value()
        Dims.JIB_SEGMENTS = self.jibSegment_spinBox.value()
        Dims.JIB_SEG_LENGTH = Dims.JIB_LENGTH / Dims.JIB_SEGMENTS
        Dims.JIB_SUP_TYPE = self.jibSupportType_comboBox.currentText()

        Dims.COUNTERJIB_HEIGHT = self.counterJibHeight_spinBox.value()
        Dims.COUNTERJIB_LENGTH = self.counterJibLength_spinBox.value()
        Dims.COUNTERJIB_SEGMENTS = self.counterJibSegments_spinBox.value()
        Dims.COUNTERJIB_SEG_LENGTH = Dims.COUNTERJIB_LENGTH / Dims.COUNTERJIB_SEGMENTS
        Dims.COUNTERJIB_SUP_TYPE = self.counterJibSupportType_comboBox.currentText()
        
        self.output.appendPlainText(f"Tower values: [{Dims.TOWER_HEIGHT},{Dims.TOWER_WIDTH},{Dims.TOWER_SEGMENTS},{Dims.TOWER_SUP_TYPE}]")
        self.output.appendPlainText(f"Jib values: [{Dims.JIB_LENGTH},{Dims.JIB_HEIGHT},{Dims.JIB_SEGMENTS},{Dims.JIB_SUP_TYPE}]")
        self.output.appendPlainText(f"CounterJib values: [{Dims.COUNTERJIB_LENGTH},{Dims.COUNTERJIB_HEIGHT},{Dims.COUNTERJIB_SEGMENTS},{Dims.COUNTERJIB_SUP_TYPE}]")

        if self.check_config():
            if self.towerBox.isChecked():
                crane.set_tower_dims(Dims.TOWER_HEIGHT, Dims.TOWER_WIDTH, Dims.TOWER_SEGMENTS, Dims.TOWER_SUP_TYPE)
            if self.jibBox.isChecked():
                crane.set_jib_dims(Dims.JIB_LENGTH, Dims.JIB_HEIGHT, Dims.JIB_SEGMENTS)
            if self.counterJibBox.isChecked():
                crane.set_counterjib_dims(Dims.COUNTERJIB_LENGTH, Dims.COUNTERJIB_HEIGHT, 
                                          Dims.COUNTERJIB_SEGMENTS, Dims.COUNTERJIB_SUP_TYPE)

            new_plot = self.update_plot()
            print(new_plot)

            self.output.appendPlainText(f"Enable FEM: [{self.enableFEM_checkbox.isChecked()}]")
            if self.enableFEM_checkbox.isChecked():
                # N, R, U = crane.analyze()
                self.analysis.appendPlainText('Axial Forces (positive = tension, negative = compression)')
                # self.analysis.appendPlainText(N[np.newaxis].T)
                self.analysis.appendPlainText('Reaction Forces (positive = upward, negative = downward)')
                # self.analysis.appendPlainText(R)
                self.analysis.appendPlainText('Deformation at nodes')
                # self.analysis.appendPlainText(U)

        self.output.appendPlainText("------")
        self.progressBar.setValue(100)
        QMessageBox.about(self, "Title", "Lorem ipsum dolor sit amet, consetetur sadipscing elitr.")

    def check_config(self):
        # might have to adjust to account for support type
        tower_diag = np.sqrt(Dims.TOWER_WIDTH ** 2 + Dims.TOWER_SEG_LENGTH ** 2)
        print(tower_diag)
        if tower_diag < 500 or tower_diag > 2000:
            QMessageBox.about(self, 'Error',
                              f'Your inputted tower parameters violate the length requirements for a beam with a length of {tower_diag:.4f}mm which falls outside the allows range of 500-2000mm')
            return False
        jib_diag = np.sqrt(Dims.JIB_HEIGHT ** 2 +
                           (1/2 * np.sqrt(Dims.JIB_SEG_LENGTH ** 2 +
                                          Dims.TOWER_WIDTH ** 2)) ** 2)
        if jib_diag < 500 or jib_diag > 2000:
            QMessageBox.about(self, 'Error',
                              f'Your inputted jib parameters violate the length requirements for a beam with a length of {jib_diag:.4f}mm which falls outside the allows range of 500-2000mm')
            return False
        # counterjib needs special treatment bc tower
        return True


# You need one (and only one) QApplication instance per application.
# Pass in sys.argv to allow command line arguments for your app.
# If you know you won't use command line arguments QApplication([]) works too.
app = QApplication(sys.argv)

# Create a Qt widget, which will be our window.
window = MainWindow()
window.show()  # IMPORTANT!!!!! Windows are hidden by default.

# Start the event loop.
app.exec()

# Will not be reached until application is closed
